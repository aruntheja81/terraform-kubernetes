image:
  repository: fluent/fluentd-kubernetes-daemonset
  tag: v1.2.1-debian-cloudwatch@sha256:c4f7fe6b436cd3c0952f56f61cb9d82c762f3e61eaaee674a90b7bc5c6c71183

  ## Specify an imagePullPolicy (Required)
  ## It's recommended to change this to 'Always' if the image tag is 'latest'
  ## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
  pullPolicy: IfNotPresent

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 100m
    memory: 300Mi # Memory usage can spike a bit when there's a burst of logs to process
  requests:
    cpu: 100m
    memory: 200Mi

awsRegion: ${fluentd_aws_region}
awsRole: ${fluentd_role_arn}
logGroupName: ${fluentd_loggroupname}

rbac:
  create: true

tolerations:
  - effect: NoSchedule
    operator: Exists

fluentdConfig: |
  <match fluent.**>
    @type null
  </match>

  <source>
    @type tail
    @id in_tail_container_logs
    path /var/log/containers/*.log
    pos_file /var/log/fluentd-containers.log.pos
    tag kubernetes.*
    <parse>
      @type json
      time_format %Y-%m-%dT%H:%M:%S.%NZ
    </parse>
  </source>

  <source>
    @type tail
    @id in_tail_startupscript
    path /var/log/startupscript.log
    pos_file /var/log/fluentd-startupscript.log.pos
    tag "startupscript.#{Socket.gethostname}"
    <parse>
      @type syslog
    </parse>
  </source>

  <source>
    @type systemd
    @id in_systemd_docker
    matches [{ "_SYSTEMD_UNIT": "docker.service" }]
    <storage>
      @type local
      persistent true
      path /var/log/fluentd-journald-docker-cursor.json
    </storage>
    tag "docker.#{Socket.gethostname}"
  </source>

  <source>
    @type systemd
    @id in_systemd_kubelet
    matches [{ "_SYSTEMD_UNIT": "kubelet.service" }]
    <storage>
      @type local
      persistent true
      path /var/log/fluentd-journald-kubelet-cursor.json
    </storage>
    tag "kubelet.#{Socket.gethostname}"
  </source>

  <source>
    @type tail
    @id in_tail_rescheduler
    multiline_flush_interval 5s
    path /var/log/rescheduler.log
    pos_file /var/log/fluentd-rescheduler.log.pos
    tag "rescheduler.#{Socket.gethostname}"
    <parse>
      @type multiline_kubernetes
    </parse>
  </source>

  <source>
    @type tail
    @id in_tail_glbc
    multiline_flush_interval 5s
    path /var/log/glbc.log
    pos_file /var/log/fluentd-glbc.log.pos
    tag "glbc.#{Socket.gethostname}"
    <parse>
      @type multiline_kubernetes
    </parse>
  </source>

  <source>
    @type tail
    @id in_tail_cluster_autoscaler
    multiline_flush_interval 5s
    path /var/log/cluster-autoscaler.log
    pos_file /var/log/fluentd-cluster-autoscaler.log.pos
    tag "cluster-autoscaler.#{Socket.gethostname}"
    <parse>
      @type multiline_kubernetes
    </parse>
  </source>

  # Example:
  # 2017-02-09T00:15:57.992775796Z AUDIT: id="90c73c7c-97d6-4b65-9461-f94606ff825f" ip="104.132.1.72" method="GET" user="kubecfg" as="<self>" asgroups="<lookup>" namespace="default" uri="/api/v1/namespaces/default/pods"
  # 2017-02-09T00:15:57.993528822Z AUDIT: id="90c73c7c-97d6-4b65-9461-f94606ff825f" response="200"
  <source>
    @type tail
    @id in_tail_kube_apiserver_audit
    multiline_flush_interval 5s
    path /var/log/kubernetes/kube-apiserver-audit.log
    pos_file /var/log/kube-apiserver-audit.log.pos
    tag "kube-apiserver-audit.#{Socket.gethostname}"
    <parse>
      @type multiline
      format_firstline /^\S+\s+AUDIT:/
      # Fields must be explicitly captured by name to be parsed into the record.
      # Fields may not always be present, and order may change, so this just looks
      # for a list of key="\"quoted\" value" pairs separated by spaces.
      # Unknown fields are ignored.
      # Note: We can't separate query/response lines as format1/format2 because
      #       they don't always come one after the other for a given query.
      format1 /^(?<time>\S+) AUDIT:(?: (?:id="(?<id>(?:[^"\\]|\\.)*)"|ip="(?<ip>(?:[^"\\]|\\.)*)"|method="(?<method>(?:[^"\\]|\\.)*)"|user="(?<user>(?:[^"\\]|\\.)*)"|groups="(?<groups>(?:[^"\\]|\\.)*)"|as="(?<as>(?:[^"\\]|\\.)*)"|asgroups="(?<asgroups>(?:[^"\\]|\\.)*)"|namespace="(?<namespace>(?:[^"\\]|\\.)*)"|uri="(?<uri>(?:[^"\\]|\\.)*)"|response="(?<response>(?:[^"\\]|\\.)*)"|\w+="(?:[^"\\]|\\.)*"))*/
      time_format %Y-%m-%dT%T.%L%Z
    </parse>
  </source>

  # Drop kubeapi trace,debug and info logs
  <filter kubernetes.var.log.containers.kube-apiserver-**>
    @type grep
    <exclude>
      key log
      pattern ^[TDI]\d{4}
    </exclude>
  </filter>

  # Drop calico trace,debug and info logs
  <filter kubernetes.var.log.containers.kube-apiserver-**>
    @type grep
    <exclude>
      key log
      pattern pattern \[(TRACE|DEBUG|INFO)\]
    </exclude>
  </filter>

  <filter kubernetes.**>
    @type kubernetes_metadata
    @id filter_kube_metadata
  </filter>

  ${fluentd_custom_config}
  <match **>
    @type cloudwatch_logs
    @id out_cloudwatch_logs
    log_group_name "#{ENV['LOG_GROUP_NAME']}"
    auto_create_stream true
    use_tag_as_stream true
    json_handler yajl
  </match>
