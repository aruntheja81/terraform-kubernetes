# enables rbac in multiple charts
# rbac.create is the standard way to enable rbac
rbac:
  create: true

# Nginx-ingress
controller:
  image:
    tag: "${nginx_controller_image_version}"
  publishService:
    enabled: true
  stats:
    enabled: true
  config:
    use-proxy-protocol: "true"
  replicaCount: 3
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'

Dex:
  ImageTag: ${dex_image_tag}
  Issuer: https://${kubesignin_domain_name}/dex
  Connectors:
    GitHub:
    - Name: GitHub
      ClientId: ${dex_github_client_id}
      ClientSecret: ${dex_github_client_secret}
      Org: ${dex_github_org}

Kubesignin:
  ClientSecret: "${kubesignin_client_secret}"
  RedirectUri: https://${kubesignin_domain_name}/callback
  DomainName: ${kubesignin_domain_name}

kube-prometheus:
  alertmanager:
    image:
      tag: v0.8.0
    replicaCount: 3
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ['job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: 'opsgenie'
        routes:
        - match:
            alertname: DeadMansSwitch
          receiver: opsgenie
          repeat_interval: 1m
          group_interval: 0s
          group_wait: 0s
      receivers:
        - name: opsgenie
          opsgenie_configs:
            - api_key: '${opsgenie_api_key}'
              tags: sla_${environment},kubernetes,client_${customer}
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
        ingress.kubernetes.io/whitelist-source-range: "${bastion_cidr}"
      fqdn: ${alertmanager_domain_name}
      tls:
        - secretName: alertmanager-lego-tls
          hosts:
            - ${alertmanager_domain_name}
    storageSpec:
      volumeClaimTemplate:
        spec:
          class: gp2
          resources:
            requests:
              storage: ${alertmanager_volume_size}

  prometheus:
    image:
      tag: v1.7.1
    replicaCount: 2
    retention: ${prometheus_retention}
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        kubernetes.io/tls-acme: "true"
        ingress.kubernetes.io/whitelist-source-range: "${bastion_cidr}"
      fqdn: ${prometheus_domain_name}
      tls:
        - secretName: prometheus-lego-tls
          hosts:
            - ${prometheus_domain_name}
    storageSpec:
      volumeClaimTemplate:
        spec:
          class: gp2
          resources:
            requests:
              storage: ${prometheus_volume_size}
    serviceMonitorsSelector:
      matchExpressions:
        - key: prometheus
          operator: Exists
    serviceMonitors:
      - name: alertmanager
        serviceMonitorSelectorLabels:
          prometheus: k8s
        selector:
          matchExpressions:
            - key: alertmanager
              operator: Exists
        namespaceSelector:
          matchNames:
            - monitoring
        endpoints:
          - port: http
            interval: 30s
      - name: prometheus
        serviceMonitorSelectorLabels:
          prometheus: k8s
        selector:
          matchLabels:
            app: prometheus
        namespaceSelector:
          matchNames:
            - monitoring
        endpoints:
          - port: http
            interval: 30s
    rules:
      value:
        general.rules: |+
          ### Up Alerting ###
          Alert TargetDown
            IF 100 * (count by(job) (up == 0) / count by(job) (up)) > 10
            FOR 10m
            LABELS {
              severity = "warning"
            }
            ANNOTATIONS {
              summary = "Targets are down",
              description = "{{ $value }}% or more of {{ $labels.job }} targets are down."
            }
          ### Dead man's switch ###
          ALERT DeadMansSwitch
            IF vector(1)
            LABELS {
              severity = "none",
            }
            ANNOTATIONS {
              summary = "Alerting DeadMansSwitch",
              description = "This is a DeadMansSwitch meant to ensure that the entire Alerting pipeline is functional.",
            }
        alertmanager.rules: |+
          ALERT AlertmanagerConfigInconsistent
            IF   count_values by (service) ("config_hash", alertmanager_config_hash)
              / on(service) group_left
                label_replace(prometheus_operator_alertmanager_spec_replicas, "service", "alertmanager-$1", "alertmanager", "(.*)") != 1
            FOR 5m
            LABELS {
              severity = "critical"
            }
            ANNOTATIONS {
              summary = "Alertmanager configurations are inconsistent",
              description = "The configuration of the instances of the Alertmanager cluster `{{$labels.service}}` are out of sync."
            }
          ALERT AlertmanagerDownOrMissing
            IF   label_replace(prometheus_operator_alertmanager_spec_replicas, "job", "alertmanager-$1", "alertmanager", "(.*)")
              / on(job) group_right
                sum by(job) (up) != 1
            FOR 5m
            LABELS {
              severity = "warning"
            }
            ANNOTATIONS {
              summary = "Alertmanager down or not discovered",
              description = "An unexpected number of Alertmanagers are scraped or Alertmanagers disappeared from discovery."
            }
          ALERT FailedReload
            IF alertmanager_config_last_reload_successful == 0
            FOR 10m
            LABELS {
              severity = "warning"
            }
            ANNOTATIONS {
              summary = "Alertmanager configuration reload has failed",
              description = "Reloading Alertmanager's configuration has failed for {{ $labels.namespace }}/{{ $labels.pod}}."
            }
        prometheus.rules: |+
          ALERT FailedReload
            IF prometheus_config_last_reload_successful == 0
            FOR 10m
            LABELS {
              severity = "warning"
            }
            ANNOTATIONS {
              summary = "Prometheus configuration reload has failed",
              description = "Reloading Prometheus' configuration has failed for {{ $labels.namespace }}/{{ $labels.pod}}."
            }

grafana:
  adminUser: "${grafana_admin_user}"
  adminPassword: "${grafana_admin_password}"
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      ingress.kubernetes.io/whitelist-source-range: "${bastion_cidr}"
    fqdn: ${grafana_domain_name}
    tls:
      - secretName: grafana-lego-tls
        hosts:
          - ${grafana_domain_name}
  storageSpec:
    accessMode: ReadWriteOnce
    class: gp2
    resources:
      requests:
        storage: ${grafana_volume_size}
