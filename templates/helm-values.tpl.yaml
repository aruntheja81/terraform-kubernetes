# enables rbac in multiple charts
# rbac.create is the standard way to enable rbac
rbac:
  create: true

# Nginx-ingress
controller:
  image:
    repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
    tag: "${nginx_controller_image_version}"
  publishService:
    enabled: true
  stats:
    enabled: true
  metrics:
    enabled: true
  config:
    use-proxy-protocol: "true"
  headers:
    ${headers}
  replicaCount: 3
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'

Dex:
  ImageTag: ${dex_image_tag}
  Issuer: https://${kubesignin_domain_name}/dex
  Connectors:
    GitHub:
      ${dex_gh_connectors}
  Expiry:
    SigningKeys: "${dex_expiry_signingkeys}"
    IdTokens: "${dex_expiry_idtokens}"

Kubesignin:
  ClientSecret: "${kubesignin_client_secret}"
  RedirectUri: https://${kubesignin_domain_name}/callback
  DomainName: ${kubesignin_domain_name}
  ${k8s_admins_groups}

proxies:
  dashboard:
    replicaCount: 2
    upstreamURL: "https://k8s-dashboard-kubernetes-dashboard.kube-system.svc.cluster.local"
    oidc:
      redirectURL: "${dashboard_domain_name}"
      groups: ${k8s_admins_groups_oidc_proxy}
  alertmanager:
    replicaCount: 2
    upstreamURL: "http://k8s-monitor-alertmanager:9093"
    oidc:
      redirectURL: "${alertmanager_domain_name}"
      groups: ${k8s_admins_groups_oidc_proxy}
  grafana:
    replicaCount: 2
    upstreamURL: "http://k8s-monitor-grafana"
    oidc:
      redirectURL: "${grafana_domain_name}"
      groups: ${k8s_admins_groups_oidc_proxy}
    extraArgs:
      - "--enable-authorization-header=false"
      - "--headers=X-WEBAUTH-USER=admin"
  prometheus:
    replicaCount: 2
    upstreamURL: "http://k8s-monitor-prometheus:9090"
    oidc:
      redirectURL: "${prometheus_domain_name}"
      groups: ${k8s_admins_groups_oidc_proxy}
  kibana:
    replicaCount: 2
    upstreamURL: "http://kibana:443"
    oidc:
      redirectURL: "${kibana_domain_name}"
      groups: ${k8s_admins_groups_oidc_proxy}
    extraArgs:
      - "--enable-authorization-header=false"

kube-prometheus:
  alertmanager:
    image:
      tag: v0.9.1
    replicaCount: 3
    config:
      global:
        resolve_timeout: 5m
        slack_api_url: ${slack_webhook_url}
      route:
        group_by: ['job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: slack-customer
        routes:
        - match_re:
            namespace: ^(?:infrastructure|kube-system)$
          routes:
          - match:
              severity: warning
            receiver: slack-runtime
            routes:
            - match:
                group: persistence
              receiver: slack-persistence
          - match:
              severity: critical
            receiver: opsgenie
        - match:
            alertname: TargetDown
          routes:
          - match:
             severity: warning
            receiver: slack-runtime
          - match:
              severity: critical
            receiver: opsgenie
        - match:
            alertname: DeadMansSwitch
          receiver: opsgenieproxy
          repeat_interval: 1s
          group_interval: 1s
          group_wait: 1s
        ${extra_alertmanager_routes}
      receivers:
        - name: opsgenie
          opsgenie_configs:
            - api_key: '${opsgenie_api_key}'
              tags: sla_${environment},kubernetes,client_${customer}
        - name: opsgenieproxy
          webhook_configs:
            - send_resolved: false
              url: http://k8s-monitor-opsgenie-heartbeat-proxy/proxy
        - name: slack-runtime
          slack_configs:
            - send_resolved: true
              username: ${customer}-${environment}
        - name: slack-persistence
          slack_configs:
            - channel: '#circle_persistence'
              send_resolved: true
              username: ${customer}-${environment}
        - name: slack-customer
          slack_configs:
            - api_url: ${customer_slack_hook}
              send_resolved: true
              username: Prometheus-${environment}
        ${extra_alertmanager_receivers}
    ingress:
      enabled: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          class: gp2
          resources:
            requests:
              storage: ${alertmanager_volume_size}

  prometheus:
    image:
      tag: v2.0.0
    replicaCount: 2
    retention: ${prometheus_retention}
    ingress:
      enabled: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          class: gp2
          resources:
            requests:
              storage: ${prometheus_volume_size}
    serviceMonitorsSelector:
      matchExpressions:
        - key: prometheus
          operator: Exists
    serviceMonitors:
      - name: nginx-ingress
        serviceMonitorSelectorLabels:
          prometheus: k8s
        selector:
          matchLabels:
            app: nginx-ingress
        namespaceSelector:
          matchNames:
            - infrastructure
        endpoints:
          - port: metrics
            interval: 30s

  grafana:
    adminUser: "${grafana_admin_user}"
    adminPassword: "${grafana_admin_password}"
    keepOriginalDashboards: true
    keepOriginalDatasources: true
    extraVars:
      - name: GF_AUTH_PROXY_ENABLED
        value: "true"
    ingress:
      enabled: false
    storageSpec:
      accessMode: ReadWriteOnce
      class: gp2
      resources:
        requests:
          storage: ${grafana_volume_size}
    dataSource:
      ${extra_grafana_datasoures}
    serverDashboardFiles:
      ${extra_grafana_dashboards}

opsgenieHeartbeatProxy:
    opsgenie_api_key: ${opsgenie_api_key}
    heartbeat_name: ${opsgenie_heartbeat_name}
